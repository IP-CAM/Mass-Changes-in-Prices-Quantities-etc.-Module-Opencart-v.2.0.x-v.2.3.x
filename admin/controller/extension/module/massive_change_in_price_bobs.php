<?php/** * Class ControllerExtensionModuleMassiveChangeInPricerBobs * @author  Bobs */class ControllerExtensionModuleMassiveChangeInPriceBobs extends Controller{    private $error = array();    private $category_id = 0;    private $path = array();    private $data = array();	public function install()	{		$this->load->model('setting/setting');		$this->load->model('user/user_group');		$this->load->model('design/layout');		$this->model_user_user_group->addPermission($this->user->getGroupId(), 'access', 'extension/module/massive_change_in_price_bobs');		$this->model_user_user_group->addPermission($this->user->getGroupId(), 'modify', 'extension/module/massive_change_in_price_bobs');		$faq_layout = array(			'name' => 'The massive price change of Mr. Bobs',			'layout_route' => array(				'first_route' => array(					'store_id' => '0',					'route' => 'massive_change_in_price_bobs'				)			)		);		$this->model_design_layout->addLayout($faq_layout);		//$this->model_extension_massive_change_in_price_bobs->install(); //Create tabl	}	public function uninstall()	{		$this->load->model('setting/setting');		$this->load->model('user/user_group');		$this->load->model('design/layout');		$this->model_user_user_group->removePermission($this->user->getGroupId(), 'access', 'extension/module/massive_change_in_price_bobs');		$this->model_user_user_group->removePermission($this->user->getGroupId(), 'modify', 'extension/module/massive_change_in_price_bobs');		//$this->model_extension_page_order_bobs->uninstall(); //Delete tabl	}    public function index()    {        $this->load->language('extension/module/massive_change_in_price_bobs');        $this->load->language('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('extension/massive_change_in_price_bobs');        $this->load->model('catalog/category');        $this->getListCategory();        $this->getListProducts();    }    protected function getListCategory() {        $this->data['breadcrumbs'] = array();        $this->data['breadcrumbs'][] = array(            'text' => $this->language->get('text_home'),            'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], true)        );        $this->data['breadcrumbs'][] = array(            'text' => $this->language->get('heading_title'),            'href' => $this->url->link('extension/module/massive_change_in_price_bobs', 'token=' . $this->session->data['token'], true)        );        $this->data['categories'] = array();        if (isset($this->request->get['path'])) {            if ($this->request->get['path'] != '') {                $this->path = explode('_', $this->request->get['path']);                $this->category_id = end($this->path);                $this->session->data['path'] = $this->request->get['path'];            } else {                unset($this->session->data['path']);            }        } elseif (isset($this->session->data['path'])) {            $this->path = explode('_', $this->session->data['path']);            $this->category_id = end($this->path);        }        $this->data['categories'] = $this->getCategories(0);        $this->data['heading_title'] = $this->language->get('heading_title');        $this->data['text_list'] = $this->language->get('text_list');        $this->data['text_no_results'] = $this->language->get('text_no_results');        $this->data['text_confirm'] = $this->language->get('text_confirm');        $this->data['column_name'] = $this->language->get('column_name');        $this->data['column_action'] = $this->language->get('column_action');        $this->data['button_view'] = $this->language->get('button_view');        if (isset($this->error['warning'])) {            $this->data['error_warning'] = $this->error['warning'];        } else {            $this->data['error_warning'] = '';        }        if (isset($this->session->data['success'])) {            $this->data['success'] = $this->session->data['success'];            unset($this->session->data['success']);        } else {            $this->data['success'] = '';        }        if (isset($this->request->post['selected'])) {            $this->data['selected'] = (array)$this->request->post['selected'];        } else {            $this->data['selected'] = array();        }        $this->data['header'] = $this->load->controller('common/header');        $this->data['column_left'] = $this->load->controller('common/column_left');        $this->data['footer'] = $this->load->controller('common/footer');        $this->response->setOutput($this->load->view('extension/module/massive_change_in_price_bobs', $this->data));    }    private function getCategories($parent_id, $parent_path = '', $indent = '') {        $category_id = array_shift($this->path);        $output = array();        static $href_category = null;        if ($href_category === null) {            $href_category = $this->url->link('extension/module/massive_change_in_price_bobs', 'token=' . $this->session->data['token'] . '&path=', 'SSL');        }        $results = $this->model_catalog_category->getCategoriesByParentId($parent_id);        foreach ($results as $result) {            $path = $parent_path . $result['category_id'];            $href = ($result['children']) ? $href_category . $path : '';            $name = $result['name'];            if ($category_id == $result['category_id']) {                $name = '<b>' . $name . '</b>';                $href = '';            }            $selected = isset($this->request->post['selected']) && in_array($result['category_id'], $this->request->post['selected']);            $output[$result['category_id']] = array(                'category_id' => $result['category_id'],                'name'        => $name,                'selected'    => $selected,                'view'        => $this->url->link('extension/module/massive_change_in_price_bobs/view', 'token=' . $this->session->data['token'] . '&category_id=' . $result['category_id'], 'SSL'),                'href'        => $href,                'indent'      => $indent            );            if ($category_id == $result['category_id']) {                $output += $this->getCategories($result['category_id'], $path . '_', $indent . str_repeat('&nbsp;', 8));            }        }        return $output;    }    public function view() {        $this->load->language('extension/module/massive_change_in_price_bobs');        $this->load->language('catalog/product');        $this->document->setTitle($this->language->get('heading_title'));        $this->load->model('extension/massive_change_in_price_bobs');        $this->load->model('catalog/category');        $this->getListCategory();        $this->getListProducts($this->request->get['category_id']);    }    protected function getListProducts($category_id=-1) {            /*$this->load->model('catalog/product');            $this->data['products'] = $this->model_catalog_product->getProductsByCategoryId($category_id);            $dsf=$this->data['products']; */            if (isset($this->request->get['filter_name'])) {                $filter_name = $this->request->get['filter_name'];            } else {                $filter_name = null;            }            if (isset($this->request->get['filter_model'])) {                $filter_model = $this->request->get['filter_model'];            } else {                $filter_model = null;            }            if (isset($this->request->get['filter_price'])) {                $filter_price = $this->request->get['filter_price'];            } else {                $filter_price = null;            }            if (isset($this->request->get['filter_quantity'])) {                $filter_quantity = $this->request->get['filter_quantity'];            } else {                $filter_quantity = null;            }            if (isset($this->request->get['filter_category'])) {                $filter_category = $this->request->get['filter_category'];            } else {                $filter_category = NULL;            }            if (isset($this->request->get['filter_status'])) {                $filter_status = $this->request->get['filter_status'];            } else {                $filter_status = null;            }            if (isset($this->request->get['filter_image'])) {                $filter_image = $this->request->get['filter_image'];            } else {                $filter_image = null;            }            if (isset($this->request->get['sort'])) {                $sort = $this->request->get['sort'];            } else {                $sort = 'pd.name';            }            if (isset($this->request->get['order'])) {                $order = $this->request->get['order'];            } else {                $order = 'ASC';            }            if (isset($this->request->get['page'])) {                $page = $this->request->get['page'];            } else {                $page = 1;            }            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_category'])) {                $url .= '&filter_category=' . urlencode(html_entity_decode($this->request->get['filter_category'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_model'])) {                $url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_quantity'])) {                $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['filter_image'])) {                $url .= '&filter_image=' . $this->request->get['filter_image'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            $this->data['products'] = array();            $filter_data = array(                'filter_name'	  => $filter_name,                'filter_model'	  => $filter_model,                'filter_price'	  => $filter_price,                'filter_quantity' => $filter_quantity,                'filter_category' => $filter_category,                'filter_status'   => $filter_status,                'filter_image'    => $filter_image,                'sort'            => $sort,                'order'           => $order,                'start'           => ($page - 1) * $this->config->get('config_limit_admin'),                'limit'           => $this->config->get('config_limit_admin')            );            $this->load->model('tool/image');            $product_total = $this->model_catalog_product->getTotalProducts($filter_data);            $results = $this->model_catalog_product->getProducts($filter_data);            $this->load->model('catalog/category');            $filter_data = array(                'sort'        => 'name',                'order'       => 'ASC'            );            $this->data['categories_for_filter'] = $this->model_catalog_category->getCategories($filter_data);            foreach ($results as $result) {                $category =  $this->model_catalog_product->getProductCategories($result['product_id']);                if (is_file(DIR_IMAGE . $result['image'])) {                    $image = $this->model_tool_image->resize($result['image'], 40, 40);                } else {                    $image = $this->model_tool_image->resize('no_image.png', 40, 40);                }                $special = false;                $product_specials = $this->model_catalog_product->getProductSpecials($result['product_id']);                foreach ($product_specials  as $product_special) {                    if (($product_special['date_start'] == '0000-00-00' || strtotime($product_special['date_start']) < time()) && ($product_special['date_end'] == '0000-00-00' || strtotime($product_special['date_end']) > time())) {                        $special = $product_special['price'];                        break;                    }                }                $this->data['products'][] = array(                    'product_id' => $result['product_id'],                    'image'      => $image,                    'name'       => $result['name'],                    'model'      => $result['model'],                    'price'      => $result['price'],                    'category'   => $category,                    'special'    => $special,                    'quantity'   => $result['quantity'],                    'status'     => $result['status'] ? $this->language->get('text_enabled') : $this->language->get('text_disabled'),                    'edit'       => $this->url->link('catalog/product/edit', 'token=' . $this->session->data['token'] . '&product_id=' . $result['product_id'] . $url, true)                );            }            $this->data['heading_title'] = $this->language->get('heading_title');            $this->data['text_list'] = $this->language->get('text_list');            $this->data['text_enabled'] = $this->language->get('text_enabled');            $this->data['text_disabled'] = $this->language->get('text_disabled');            $this->data['text_no_results'] = $this->language->get('text_no_results');            $this->data['text_confirm'] = $this->language->get('text_confirm');            $this->data['column_image'] = $this->language->get('column_image');            $this->data['column_name'] = $this->language->get('column_name');            $this->data['column_category'] = $this->language->get('column_category');            $this->data['column_model'] = $this->language->get('column_model');            $this->data['column_price'] = $this->language->get('column_price');            $this->data['column_quantity'] = $this->language->get('column_quantity');            $this->data['column_status'] = $this->language->get('column_status');            $this->data['column_action'] = $this->language->get('column_action');            $this->data['entry_name'] = $this->language->get('entry_name');            $this->data['entry_model'] = $this->language->get('entry_model');            $this->data['entry_price'] = $this->language->get('entry_price');            $this->data['entry_quantity'] = $this->language->get('entry_quantity');            $this->data['entry_status'] = $this->language->get('entry_status');            $this->data['entry_image'] = $this->language->get('entry_image');            $this->data['button_copy'] = $this->language->get('button_copy');            $this->data['button_add'] = $this->language->get('button_add');            $this->data['button_edit'] = $this->language->get('button_edit');            $this->data['button_delete'] = $this->language->get('button_delete');            $this->data['button_filter'] = $this->language->get('button_filter');            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_model'])) {                $url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_quantity'])) {                $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];            }            if (isset($this->request->get['filter_category'])) {                $url .= '&filter_category=' . $this->request->get['filter_category'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['filter_image'])) {                $url .= '&filter_image=' . $this->request->get['filter_image'];            }            if ($order == 'ASC') {                $url .= '&order=DESC';            } else {                $url .= '&order=ASC';            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            $this->data['sort_name'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . '&sort=pd.name' . $url, true);            $this->data['sort_model'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.model' . $url, true);            $this->data['sort_price'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.price' . $url, true);            $this->data['sort_quantity'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.quantity' . $url, true);            $this->data['sort_status'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.status' . $url, true);            $this->data['sort_order'] = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . '&sort=p.sort_order' . $url, true);            $url = '';            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_model'])) {                $url .= '&filter_model=' . urlencode(html_entity_decode($this->request->get['filter_model'], ENT_QUOTES, 'UTF-8'));            }            if (isset($this->request->get['filter_price'])) {                $url .= '&filter_price=' . $this->request->get['filter_price'];            }            if (isset($this->request->get['filter_quantity'])) {                $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];            }            if (isset($this->request->get['filter_category'])) {                $url .= '&filter_category=' . $this->request->get['filter_category'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['filter_image'])) {                $url .= '&filter_image=' . $this->request->get['filter_image'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            $pagination = new Pagination();            $pagination->total = $product_total;            $pagination->page = $page;            $pagination->limit = $this->config->get('config_limit_admin');            $pagination->url = $this->url->link('catalog/product', 'token=' . $this->session->data['token'] . $url . '&page={page}', true);            $this->data['pagination'] = $pagination->render();            $this->data['results'] = sprintf($this->language->get('text_pagination'), ($product_total) ? (($page - 1) * $this->config->get('config_limit_admin')) + 1 : 0, ((($page - 1) * $this->config->get('config_limit_admin')) > ($product_total - $this->config->get('config_limit_admin'))) ? $product_total : ((($page - 1) * $this->config->get('config_limit_admin')) + $this->config->get('config_limit_admin')), $product_total, ceil($product_total / $this->config->get('config_limit_admin')));            $this->data['filter_name'] = $filter_name;            $this->data['filter_model'] = $filter_model;            $this->data['filter_price'] = $filter_price;            $this->data['filter_quantity'] = $filter_quantity;            $this->data['filter_category'] = $filter_category;            $this->data['filter_status'] = $filter_status;            $this->data['filter_image'] = $filter_image;            $this->data['sort'] = $sort;            $this->data['order'] = $order;            $this->data['header'] = $this->load->controller('common/header');            $this->data['column_left'] = $this->load->controller('common/column_left');            $this->data['footer'] = $this->load->controller('common/footer');        $this->response->setOutput($this->load->view('extension/module/massive_change_in_price_bobs', $this->data));    }}?>